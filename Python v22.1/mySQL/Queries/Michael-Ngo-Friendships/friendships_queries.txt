1. Query: Create 6 new users

INSERT INTO friendships_schema.users (first_name , last_name) 
	VALUE ('Michael', 'Ngo'), ('Alexis', 'Miller'), ('Tana', 'Inzar'), ('Bilal', 'Aziz'), ('Blake', 'Hall'), ('Deedee', 'Kaka');

2. Query: Have user 1 be friends with user 2, 4 and 6

INSERT INTO friendships_schema.friendships (user_id,friendship_id)
	VALUE (1,2),(1,4),(1,6);

3. Query: Have user 2 be friends with user 1, 3 and 5

INSERT INTO friendships_schema.friendships (user_id,friendship_id)
	VALUE (2,1),(2,3),(2,5);

4. Query: Have user 3 be friends with user 2 and 5

INSERT INTO friendships_schema.friendships (user_id,friendship_id)
	VALUE (3,2),(3,5);

5. Query: Have user 4 be friends with user 3

INSERT INTO friendships_schema.friendships (user_id,friendship_id)
	VALUE (4,3);

6. Query: Have user 5 be friends with user 1 and 6

INSERT INTO friendships_schema.friendships (user_id,friendship_id)
	VALUE (5,1),(5,6);

7. Query: Have user 6 be friends with user 2 and 3

INSERT INTO friendships_schema.friendships (user_id,friendship_id)
	VALUE (6,2),(6,3);

8. Query: Display the relationships created as shown in the table in the above image

SELECT users.first_name, users.last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name
	FROM friendships_schema.users
	JOIN friendships_schema.friendships ON users.id = friendships.user_id
	LEFT JOIN friendships_schema.users AS users2 ON users2.id = friendships.friendship_id;

9. NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.

SELECT users.first_name, users.last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name
	FROM friendships_schema.users
	JOIN friendships_schema.friendships ON users.id = friendships.user_id
	LEFT JOIN friendships_schema.users AS users2 ON users2.id = friendships.friendship_id
    	WHERE users.id = 1;

10. NINJA Query: Return the count of all friendships

SELECT COUNT(*) AS num_of_fiendships FROM friendships_schema.friendships;

11. NINJA Query: Find out who has the most friends and return the count of their friends.

SELECT users.id, users.first_name, users.last_name, COUNT(user_id) AS num_of_friends FROM friendships_schema.friendships
	JOIN friendships_schema.users ON users.id = friendships.user_id
	GROUP BY user_id
	ORDER BY num_of_friends DESC
	LIMIT 2;

12. NINJA Query: Return the friends of the third user in alphabetical order

SELECT users.first_name, users.last_name, users2.first_name AS friend_first_name, users2.last_name AS friend_last_name
	FROM friendships_schema.users
	JOIN friendships_schema.friendships ON users.id = friendships.user_id
	LEFT JOIN friendships_schema.users AS users2 ON users2.id = friendships.friendship_id
	WHERE users.id = 3
	ORDER BY first_name;
